% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_git_init.R
\name{tar_git_init}
\alias{tar_git_init}
\title{Initialize a data store Git repository.}
\usage{
tar_git_init(
  project = getwd(),
  store = targets::tar_config_get("store"),
  stash_gitignore = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{project}{Character of length 1, name of the current
\code{targets} project. Thanks to the \code{config} R package,
\code{targets} YAML configuration files can store multiple
sets of configuration settings, with each set corresponding
to its own project. The \code{project} argument allows you to
set or get a configuration setting for a specific project
for a given call to \code{tar_config_set()} or \code{tar_config_get()}.
The default project is always called \code{"main"}
unless you set another
default project using the \code{TAR_PROJECT} environment variable,
e.g. \code{Sys.setenv(tar_project = "custom")}. This also has the
effect of temporarily modifying the default arguments to other functions
such as \code{\link[targets:tar_make]{tar_make()}} because the default arguments
to those functions are controlled by \code{tar_config_get()}.}

\item{store}{Character of length 1, path to the data store of the pipeline.
If \code{NULL}, the \code{store} setting is left unchanged in the
YAML configuration file (default: \verb{_targets.yaml}).
Usually, the data store lives at \verb{_targets}.
Set \code{store} to a custom directory
to specify a path other than \verb{_targets/}. The path need not exist
before the pipeline begins, and it need not end with "_targets",
but it must be writeable.
For optimal performance, choose a storage location
with fast read/write access.
If the argument \code{NULL}, the setting is not modified.
Use \code{\link[targets:tar_config_unset]{tar_config_unset()}} to delete a setting.}
}
\description{
Initialize a Git repository for a \code{targets} data store.
}
\examples{
if (Sys.getenv("GITTARGETS_EXAMPLES") == "true") {
targets::tar_dir({ # Containing code does not modify the user's file space.
targets::tar_script()
targets::tar_make()
tar_git_init()
})
}
}
\seealso{
Other git: 
\code{\link{tar_git_snapshot}()},
\code{\link{tar_git_status}()}
}
\concept{git}
