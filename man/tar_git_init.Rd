% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_git_init.R
\name{tar_git_init}
\alias{tar_git_init}
\title{Initialize a data repository (Git).}
\usage{
tar_git_init(
  store = targets::tar_config_get("store"),
  stash_gitignore = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{store}{Character of length 1, path to the data store of the pipeline.
If \code{NULL}, the \code{store} setting is left unchanged in the
YAML configuration file (default: \verb{_targets.yaml}).
Usually, the data store lives at \verb{_targets}.
Set \code{store} to a custom directory
to specify a path other than \verb{_targets/}. The path need not exist
before the pipeline begins, and it need not end with "_targets",
but it must be writeable.
For optimal performance, choose a storage location
with fast read/write access.
If the argument \code{NULL}, the setting is not modified.
Use \code{\link[targets:tar_config_unset]{tar_config_unset()}} to delete a setting.}

\item{stash_gitignore}{Logical of length 1, whether to temporarily
stash the \code{.gitignore} file of the data store.
The \code{targets} package writes a \code{.gitignore} file to new data stores
in order to prevent accidental commits to the code Git repository.
Unfortunately, for \code{gittargets}, this automatic \code{.gitignore} file
interferes with proper data versioning. So by default, \code{gittargets}
temporarily stashes it in
\code{tools::R_user_dir(package = "gittargets", which = "cache")}
while querying and modifying the data store. As long as the R
session does not crash unexpectedly, the \code{.gitignore} file
is returned to its proper location when \code{gittargets} is finished
working with the data store.}

\item{verbose}{Logical of length 1, whether to print messages to the
R console.}
}
\value{
\code{NULL} (invisibly).
}
\description{
Initialize a Git repository for a \code{targets} data store.
}
\examples{
if (Sys.getenv("GITTARGETS_EXAMPLES") == "true") {
targets::tar_dir({ # Containing code does not modify the user's file space.
targets::tar_script()
targets::tar_make()
tar_git_init()
})
}
}
\seealso{
Other git: 
\code{\link{tar_git_snapshot}()},
\code{\link{tar_git_status_code}()},
\code{\link{tar_git_status_data}()},
\code{\link{tar_git_status_targets}()},
\code{\link{tar_git_status}()}
}
\concept{git}
