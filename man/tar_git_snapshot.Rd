% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_git_snapshot.R
\name{tar_git_snapshot}
\alias{tar_git_snapshot}
\title{Snapshot the data repository (Git).}
\usage{
tar_git_snapshot(
  code = getwd(),
  store = targets::tar_config_get("store"),
  prompt = interactive(),
  status = prompt,
  verbose = TRUE
)
}
\arguments{
\item{code}{Character of length 1, directory path to the code repository,
usually the root of the \code{targets} project.}

\item{store}{Character of length 1, path to the data store of the pipeline.
If \code{NULL}, the \code{store} setting is left unchanged in the
YAML configuration file (default: \verb{_targets.yaml}).
Usually, the data store lives at \verb{_targets}.
Set \code{store} to a custom directory
to specify a path other than \verb{_targets/}. The path need not exist
before the pipeline begins, and it need not end with "_targets",
but it must be writeable.
For optimal performance, choose a storage location
with fast read/write access.
If the argument \code{NULL}, the setting is not modified.
Use \code{\link[targets:tar_config_unset]{tar_config_unset()}} to delete a setting.}

\item{prompt}{Logical of length 1, whether to prompt the user before
creating a snapshot.}

\item{status}{Logical of length 1, whether to print the project status
with \code{\link[=tar_git_status]{tar_git_status()}} before asking whether a snapshot should be
created.}

\item{verbose}{Logical of length 1, whether to print R console messages
confirming that a snapshot was created.}
}
\description{
Snapshot the Git data repository of a \code{targets} project.

A Git-backed \code{gittargets} data snapshot is a special kind of
Git commit. Every data commit gets its own branch,
and the branch name is equal to the Git SHA1 hash
of the code commit that was checked out at the time.
That way, when you switch branches or commits in the code,
\code{\link[=tar_git_checkout]{tar_git_checkout()}} can revert the data to match.
Ideally, your targets should stay up to date even as you
transition among multiple branches.
}
\examples{
if (Sys.getenv("GITTARGETS_EXAMPLES") == "true") {
targets::tar_dir({ # Containing code does not modify the user's filespace.
targets::tar_script()
targets::tar_make()
tar_git_init()
gert::git_init()
gert::git_add("_targets.R")
gert::git_commit("First commit")
tar_git_snapshot()
})
}
}
\seealso{
Other git: 
\code{\link{tar_git_init}()},
\code{\link{tar_git_status_code}()},
\code{\link{tar_git_status_data}()},
\code{\link{tar_git_status_targets}()},
\code{\link{tar_git_status}()}
}
\concept{git}
